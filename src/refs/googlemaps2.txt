import clsx from "clsx";
import { reduxForm, InjectedFormProps } from "redux-form";
import { useEffect, useState } from "react";
import {
  useJsApiLoader,
  GoogleMap,
  Marker,
  Autocomplete,
  DirectionsRenderer,
} from '@react-google-maps/api'
import { useRef } from 'react'
import Button from "shared/components/Button";



interface AddRestaurantFormProps {
  className?: string
}

interface MyFormValuesprops {

}

type FinalProps = InjectedFormProps<AddRestaurantFormProps, MyFormValuesprops> & AddRestaurantFormProps


function AddRestaurantForm({ className, handleSubmit, initialize }: FinalProps) {

  const [map, setMap] = useState<any>(/** @type google.maps.Map */(null))
  const [centre, SetCentre] = useState<any>({ lat: 48.8584, lng: 2.2945 })
  const [directionsResponse, setDirectionsResponse] = useState<any>(null)

  const { isLoaded } = useJsApiLoader({
    googleMapsApiKey: "AIzaSyB7LXBliP9xH-Y-Cj60iocPucVTa5dL4uo",
    libraries: ['places'],
  })
  const [origin, setOrigin] = useState("204, 4th D Cross Road, B Channasandra, Kasturi Nagar, Bengaluru, Karnataka")
  const [destination, setDestination] = useState(" 651, B.Channasandra Main Rd, opposite Shri Chowdeshwari Tayi Temple, B Channasandra, OMBR Layout, Kasturi Nagar, Bengaluru, Karnataka 560043")

  useEffect(() => {
    // Use the Geocoding API to convert the address to coordinates

    fetch(
      `https://maps.googleapis.com/maps/api/geocode/json?address=${origin}&key=AIzaSyB7LXBliP9xH-Y-Cj60iocPucVTa5dL4uo`
    )
      .then((response) => response.json())
      .then((data) => {
        if (data.status === 'OK' && data.results.length > 0) {
          const location = data.results[0].geometry.location;
          SetCentre(location);
        }
      });
  }, []);

  async function calculateRoute() {

    const directionsService = new google.maps.DirectionsService()
    const results = await directionsService.route({
      origin: origin,
      destination: destination,
      travelMode: google.maps.TravelMode.DRIVING,
    })
    setDirectionsResponse(results)
  }

  return (
    <div className={clsx("add-restaurant-form-container", className)}>
      {isLoaded &&
        <GoogleMap
          center={centre}
          zoom={15}
          mapContainerStyle={{ width: '100%', height: '100%' }}
          options={{
            zoomControl: true,
            streetViewControl: false,
            mapTypeControl: false,
            fullscreenControl: false,
          }}
          onLoad={map => setMap(map)}
        >
          <Marker position={centre} />
          {directionsResponse && (
            <DirectionsRenderer directions={directionsResponse} />
          )}

        </GoogleMap>
      }
      <Button label="calcualte" onClick={calculateRoute} />
    </div>)
}

export default reduxForm<MyFormValuesprops, AddRestaurantFormProps>({
  form: 'AddResturantReduxForm',
})(AddRestaurantForm);
